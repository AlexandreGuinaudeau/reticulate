% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/python.R
\name{[.python.builtin.object}
\alias{[.python.builtin.object}
\alias{py_get_item}
\title{Get an item from a Python object}
\usage{
\method{[}{python.builtin.object}(x, ...)

py_get_item(x, key, silent = FALSE)
}
\arguments{
\item{x}{A Python object.}

\item{key, ...}{The key used for item lookup.}

\item{silent}{Boolean; when \code{TRUE}, attempts to access
missing items will return \code{NULL} rather than
throw an error.}
}
\description{
Retrieve an item from a Python object, similar to how
\code{x[name]} might be used in Python code to access an
item indexed by \code{key} on an object \code{x}. The object's
\verb{__getitem__} method will be called.
}
\examples{
\dontrun{

## get item from Python dict
x <- r_to_py(list(abc = "xyz"))
x["abc"]

## get item from Python list
x <- r_to_py(list("a", "b", "c"))
x[0]

## slice a NumPy array
x <- np_array(array(1:64, c(4, 4, 4)))

# R expression | Python expression
# ------------ | -----------------
  x[0]         # x[0]
  x[, 0]       # x[:, 0]
  x[, , 0]     # x[:, :, 0]

  x[NA:2]      # x[:2]
  x[`:2`]      # x[:2]

  x[2:NA]      # x[2:]
  x[`2:`]      # x[2:]

  x[NA:NA:2]   # x[::2]
  x[`::2`]     # x[::2]

  x[1:3:2]     # x[1:3:2]
  x[`1:3:2`]   # x[1:3:2]

}
}
\seealso{
Other item-related APIs: 
\code{\link{py_del_item}()},
\code{\link{py_set_item}()}

Other item-related APIs: 
\code{\link{py_del_item}()},
\code{\link{py_set_item}()}
}
\concept{item-related APIs}
